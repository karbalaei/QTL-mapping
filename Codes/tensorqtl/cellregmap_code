salloc -J interact -N 1-1 -n 32 --mem=100G --time=6:00:00 -p defq srun --pty bash

ml anaconda

#y

conda activate snp_bryois


# on JHPCE
ml gcc/9.1.0
ml python/3.8.3
#on Rockfish
ml python/3.8.6
ml py-pip
#python -m venv ./CellRegMap
source CellRegMap/bin/activate
pip install cellregmap
pip install cellregmap --use-feature=2020-resolver

#pip install limix
#pip install limix --upgrade
#pip install joblib


#python
import os
os.getcwd()

d = np.loadtxt("File name", delimiter="\t")

plink2 --bfile MDD_control_sc_maf1 --exclude Genotyping_id_na.txt --make-bed --out MDD_control_sc_maf_no_NA
--geno missing 
plink2 --bfile MDD_control_sc_maf_no_NA --maf 0.05 --hwe 1e-6 --make-bed --out MDD_control_sc_maf_filtered
plink2 --bfile MDD_control_sc_maf_filtered --indep-pairwise 250 50 0.2 --bad-ld --out MDD_control_sc_maf_info
plink2 --bfile MDD_control_sc_maf_filtered --extract MDD_control_sc_maf_info.prune.in --make-king square --out MDD_control_ibd_out

plink2 --bfile MDD_control_sc_maf_no_NA --maf 0.25 --hwe 1e-6 --make-bed --out MDD_control_sc_maf_filtered_25
plink2 --bfile MDD_control_sc_maf_filtered_25 --indep-pairwise 250 50 0.2 --bad-ld --out MDD_control_sc_maf_info_25
plink2 --bfile MDD_control_sc_maf_filtered_25 --extract MDD_control_sc_maf_info_25.prune.in --make-king square --out MDD_control_ibd_out_25

plink2 --bfile MDD_control_sc_maf1 --maf 0.05 --hwe 1e-6 --geno 0.02 --make-bed --out MDD_control_sc_maf_filtered_05_geno
plink2 --bfile MDD_control_sc_maf_filtered_05_geno --indep-pairwise 250 50 0.2 --bad-ld --out MDD_control_sc_maf_info_05_geno
plink2 --bfile MDD_control_sc_maf_filtered_05_geno --extract MDD_control_sc_maf_info_05_geno.prune.in --make-king square --out MDD_control_ibd_out__05_geno




import pandas as pd
import xarray as xr
from numpy.linalg import cholesky
from pandas_plink import read_plink1_bin
import os
import numpy as np
#os.chdir('/data/fgoes1/RK/tensorqtl')
#os.chdir('/dcs04/lieber/lcolladotor/hydeGoes_LIBD3010/hydeGoes_scSeq_mdd/Tensorqtl/CellRegMap')

sample_mapping = pd.read_csv("sample_mapping_file.csv", dtype={"genotype_individual_id": str, "phenotype_sample_id": str})

## genotype_individual_id are donor IDs, as found in the genotype matrix (G) and GRM covariance (K)
## phenotype_sample_id are cell IDs, as found in the scRNA-seq phenotype vector (y) and cell context covariance (C)
sample_mapping.head()

## extract unique individuals
donors = sample_mapping["genotype_individual_id"].unique()
donors.sort()
print("Number of unique donors: {}".format(len(donors)))

kinship_file =  "Kinship_matrix_Final.txt"
K = pd.read_csv( kinship_file, sep="\t", index_col=0)
assert all(K.columns == K.index) #symmetric matrix, donors x donors

K = xr.DataArray(K.values, dims=["sample_0", "sample_1"], coords={"sample_0": K.columns, "sample_1": K.index})

K = K.sortby("sample_0").sortby("sample_1")
donors = sorted(set(list(K.sample_0.values)).intersection(donors))
print("Number of donors after kinship intersection: {}".format(len(donors)))

## subset to relevant donors
K = K.sel(sample_0=donors, sample_1=donors)
assert all(K.sample_0 == donors)
assert all(K.sample_1 == donors)


## and decompose such as K = hK @ hK.T (using Cholesky decomposition)
hK = cholesky(K.values)
hK = xr.DataArray(hK, dims=["sample", "col"], coords={"sample": K.sample_0.values})
assert all(hK.sample.values == K.sample_0.values)

## use sel from xarray to expand hK (using the sample mapping file)
hK_expanded = hK.sel(sample=sample_mapping["genotype_individual_id"].values)
assert all(hK_expanded.sample.values == sample_mapping["genotype_individual_id"].values)


######################################
############### Genotypes ############
######################################

genotype_file = pd.read_csv("MDD_control_sc_maf1_numeric_id.txt", sep="\t" , index_col=0)
genotype_file = genotype_file.apply(np.int64)

plink_file = "MDD_control_sc_maf_filtered.bed"
G = read_plink1_bin(plink_file)


E_file = "astro_CellRegMap_PCAs.txt"
E = pd.read_csv(E_file, index_col=0 ,  sep="\t")

E = xr.DataArray(E.values, dims=["cell", "pc"], coords={"cell": E.index.values, "pc": E.columns.values})

annotation_file = "astro_annotation.txt"
anno_df = pd.read_csv(annotation_file, sep="\t")
anno_df.head(2)

# (3) window size (cis)
w = 1000000

#############################
###### SNP selection
#########################################################
# option 2: cis window around a specific gene (discovery)


def cis_snp_selection(feature_id, annotation_df, G, window_size):
    feature = annotation_df.query("feature_id==\"{}\"".format(feature_id)).squeeze()
    chrom = str(feature['chromosome'])
    start = feature['start']
    end = feature['end']
    # make robust to features self-specified back-to-front
    lowest = min([start,end])
    highest = max([start,end])
    # for cis, we sequentially add snps that fall within each region
    G = G.where((G.chrom == str(chrom)) & (G.pos > (lowest-window_size)) & (G.pos < (highest+window_size)), drop=True)
    return G
	
def cis_snp_selection(feature_id, annotation_df, G, window_size):
    feature = anno_df[anno_df["feature_id"]==feature_id].squeeze()
    chrom = str(feature['chromosome'])
    start = feature['start']
    end = feature['end']
    # make robust to features self-specified back-to-front
    lowest = min([start,end])
    highest = max([start,end])
    # for cis, we sequentially add snps that fall within each region
    G = G.where((G.chrom == str(chrom)) & (G.pos > (lowest-window_size)) & (G.pos < (highest+window_size)), drop=True)
    return G
	

	
phenotype_file = "astro_GE.txt"
phenotype = pd.read_csv(phenotype_file, index_col=0, sep="\t")


W= pd.read_csv("astro_CellRegMap_covariate.txt", index_col=0, sep="\t")

phenotype = phenotype.astype(float)
phenotype = xr.DataArray(phenotype.values, dims=["trait", "cell"], coords={"trait": phenotype.index.values, "cell": phenotype.columns.values})

phenotype = phenotype.sel(cell=sample_mapping["phenotype_sample_id"].values)
assert all(phenotype.cell.values == sample_mapping["phenotype_sample_id"].values)

Genes = phenotype["trait"]

gene_name = Genes[0]
feature_id=Genes[0]
#GE_data = pd.read_csv("astro_GE.txt", sep="\t")
#Genes = GE_data["ID"]

#gene_name = Genes[0]

G_sel = cis_snp_selection(gene_name, anno_df, G, w)

# expand out genotypes from cells to donors (and select relevant donors in the same step)
G_expanded = G_sel.sel(sample=sample_mapping["genotype_individual_id"].values)
assert all(hK_expanded.sample.values == G_expanded.sample.values)


random = RandomState(1)
n = 99                              # number of samples (cells)
p = 99                                # number of individuals
k = 4                                # number of contexts
y = random.randn(n, 1)               # outcome vector (expression phenotype, one gene only)
C = random.randn(n, k)               # context matrix (cells by contexts/factors)
W = ones((n, 1))                     # intercept (covariate matrix)
hK = random.randn(n, p)              # decomposition of kinship matrix (K = hK @ hK.T)
g = 1.0 * (random.rand(n, 1) < 0.2)  # SNP vector

## Association test
pv0 = run_association(y=y, G=g, W=W, E=C, hK=hK)[0]
print(f'Association test p-value: {pv0}')

## Interaction test
pv = run_interaction(y=y, G=g, W=W, E=C, hK=hK)[0]
print(f'Interaction test p-value: {pv}')

# Effect sizes estimation
betas = estimate_betas(y=y, G=g, W=W, E=C, hK=hK)
beta_G = betas[0]                         # persistent effect (scalar)
beta_GxC = betas[1][0]                    # GxC effects (vector)

print(f'persistent genetic effect (betaG): {betaG}')
print(f'cell-level effect sizes due to GxC (betaGxC): {betaGxC}')




trait_name = anno_df.query("ID==\"{}\"".format(gene_name)).index[0]
trait_name



y = phenotype.sel(trait=gene_name)



vector = np.vectorize(y.values)
y_test = np.array([2, 4, 6, 8])
x = vector(y)


pv = run_interaction(y=y, G=G_expanded, W=W, E=E, hK=hK_expanded)[0]


##### JHPCE
conda create -n CellRegMap python
conda activate CellRegMap



find . -name "*_Astro_Asso_CellRegMap.csv" | wc -l


for ((i=522033;i<522163;i+=1)); do echo "${i}" ; done

for ((i=1;i<5;i+=1)); do echo "0.${i}" ; done

871598 874662

for ((i=871598;i<874663;i+=1)); do scancel "${i}" ; done
